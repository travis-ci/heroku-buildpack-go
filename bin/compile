#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir> <env-dir>

set -eo pipefail

indent() {
    sed -u 's/^/       /'
}

export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
gitdir=$(cd "$GIT_DIR" && pwd)
buildpack=$(dirname $(dirname $0))
arch=$(uname -m|tr A-Z a-z)
if test $arch = x86_64
then arch=amd64
fi
plat=$(uname|tr A-Z a-z)-$arch

# Python
venv=$cache/venv
mkdir -p $cache/pip
python=python2.7
PATH=$buildpack/$plat/bin:$venv/bin:$PATH

virtualenv() {
    python "$buildpack/vendor/virtualenv-1.11.6/virtualenv.py" "$@"
}

if test -f $build/Godeps
then
    name=$(<$build/Godeps jq -r .ImportPath)
    ver=$(<$build/Godeps jq -r .GoVersion)
elif test -d $build/Godeps
then
    name=$(<$build/Godeps/Godeps.json jq -r .ImportPath)
    ver=$(<$build/Godeps/Godeps.json jq -r .GoVersion)
elif test -f $build/Deps
then
    name=$(<$build/Deps jq -r .ImportPath)
    ver=$(<$build/Deps jq -r .GoVersion)
elif test -f $build/vendor/manifest
then
    name=$(echo src/*/*/* | head -1 | sed 's@src/@@')
    ver=${GOVERSION:-1.5}
elif test -f $build/.godir
then
    name=$(cat $build/.godir)
    ver=${GOVERSION:-1.4.2}
else
    echo >&2 " !     A .godir is required. For instructions:"
    echo >&2 " !     http://mmcgrana.github.io/2012/09/getting-started-with-go-on-heroku"
    exit 1
fi

if ! test -f $cache/gimme ; then
  curl -sL -o $cache/gimme https://raw.githubusercontent.com/travis-ci/gimme/master/gimme
  chmod +x $cache/gimme
fi

# strip "go" prefix from version
ver=${ver#go}

mkdir -p $build/bin
GOBIN=$build/bin export GOBIN
GOROOT=$cache/$ver/go export GOROOT
GOPATH=$build/.heroku/g export GOPATH
PATH=$GOROOT/bin:$PATH

echo -n "       Selecting Go $ver..."
eval "$(GIMME_VERSION_PREFIX=$cache $cache/gimme $ver)"

if ! (test -d $build/Godeps || (which hg >/dev/null && which bzr >/dev/null))
then
    echo -n "       Installing Virtualenv..."
    virtualenv --python $python --distribute --never-download --prompt='(venv) ' $venv > /dev/null 2>&1
    . $venv/bin/activate > /dev/null 2>&1
    echo " done"

    echo -n "       Installing Mercurial..."
    pip install mercurial > /dev/null 2>&1
    echo " done"

    echo -n "       Installing Bazaar..."
    pip install bzr > /dev/null 2>&1
    echo " done"
fi

p=$GOPATH/src/$name
mkdir -p $p
cp -R $build/* $p

# allow apps to specify cgo flags and set up /app symlink so things like CGO_CFLAGS=-I/app/... work
env_dir="$3"
if [ -d "$env_dir" ]
then
    ln -sfn $build /app/code
    export_env_dir "$env_dir"
fi

if test -f "$env_dir/DUMPENV"
then
    echo "-----> Running: env | sort"
    env | sort | indent
fi

FLAGS=(-tags heroku)
if test -f "$env_dir/GO_GIT_DESCRIBE_SYMBOL"
then
    git_describe=$(git describe --tags --always)
    git_describe_symbol=$(cat "$env_dir/GO_GIT_DESCRIBE_SYMBOL")
    FLAGS=(${FLAGS[@]} -ldflags "-X $git_describe_symbol $git_describe")
fi

export ORIG_GIT_DIR="$gitdir" # set orig git dir to absolute path for later usage
unset GIT_DIR # unset git dir or it will mess with goinstall
cd $p
if test -e $build/Godeps
then
    echo "-----> Running: godep go install ${FLAGS[@]} ./..."
    godep go install "${FLAGS[@]}" ./... | indent
elif test -e $build/vendor/manifest
then
    if test -e $build/Makefile && make -n -p | grep ^buildpack: >/dev/null 2>&1
    then
        export GIT_DIR="$ORIG_GIT_DIR"
        echo "-----> Running: make buildpack (GIT_DIR=$GIT_DIR)"
        make buildpack | indent
        unset GIT_DIR
    else
        export GIT_DIR="$ORIG_GIT_DIR"
        echo "-----> Running: gb build (GIT_DIR=$GIT_DIR)"
        gb build
        unset GIT_DIR
    fi
elif test -e $build/Deps
then
    echo "-----> Running: deppy restore"
    deppy restore | indent
    if test -e $build/Makefile && make -n -p | grep ^buildpack: >/dev/null 2>&1
    then
        export GIT_DIR="$ORIG_GIT_DIR"
        echo "-----> Running: make buildpack (GIT_DIR=$GIT_DIR)"
        make buildpack | indent
        unset GIT_DIR
    else
        echo "-----> Running: deppy go install ${FLAGS[@]} ./..."
        deppy go install "${FLAGS[@]}" ./... | indent
    fi
else
    echo "-----> Running: go get ${FLAGS[@]} ./..."
    go get "${FLAGS[@]}" ./... | indent
fi

rm -rf $build/.heroku

mkdir -p $build/.profile.d
echo 'PATH=$PATH:$HOME/bin' > $build/.profile.d/go.sh
